---
// TextChatPanel.astro - Real-time text chat component for GOAT-OS Communication Hub
---

<div id="text-chat-panel" class="text-chat-panel">
  <!-- Chat Messages Container -->
  <div id="chat-messages" class="chat-messages">
    <div class="welcome-message">
      <div class="system-message">
        <span class="system-icon">üêê</span>
        <span class="system-text">Welcome to GOAT-OS Communication Hub!</span>
      </div>
      <div class="system-message">
        <span class="system-icon">üí¨</span>
        <span class="system-text">Start chatting with other GOATs...</span>
      </div>
    </div>
  </div>

  <!-- Chat Input Container -->
  <div class="chat-input-container">
    <div class="input-wrapper">
      <input 
        type="text" 
        id="chat-input" 
        class="chat-input" 
        placeholder="Type your message..."
        maxlength="500"
        autocomplete="off"
      />
      <button id="send-button" class="send-button" type="button">
        <span class="send-icon">üì§</span>
      </button>
    </div>
    <div class="input-info">
      <span id="char-counter" class="char-counter">0/500</span>
      <span class="typing-indicator" id="typing-indicator"></span>
    </div>
  </div>
</div>

<style>
  .text-chat-panel {
    display: flex;
    flex-direction: column;
    height: 100%;
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    border: 2px solid #00ff88;
    border-radius: 8px;
    overflow: hidden;
    position: relative;
  }

  .text-chat-panel::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 20% 20%, rgba(0, 255, 136, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 80% 80%, rgba(255, 20, 147, 0.1) 0%, transparent 50%);
    pointer-events: none;
    z-index: 1;
  }

  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    position: relative;
    z-index: 2;
    scrollbar-width: thin;
    scrollbar-color: #00ff88 transparent;
  }

  .chat-messages::-webkit-scrollbar {
    width: 6px;
  }

  .chat-messages::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 3px;
  }

  .chat-messages::-webkit-scrollbar-thumb {
    background: #00ff88;
    border-radius: 3px;
  }

  .chat-messages::-webkit-scrollbar-thumb:hover {
    background: #00cc6a;
  }

  .welcome-message {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-bottom: 16px;
  }

  .system-message {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: rgba(0, 255, 136, 0.1);
    border: 1px solid rgba(0, 255, 136, 0.3);
    border-radius: 6px;
    font-size: 14px;
    color: #00ff88;
  }

  .system-icon {
    font-size: 16px;
    filter: drop-shadow(0 0 4px currentColor);
  }

  .system-text {
    font-family: 'Courier New', monospace;
    font-weight: 500;
  }

  .chat-message {
    display: flex;
    flex-direction: column;
    gap: 4px;
    padding: 12px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    transition: all 0.2s ease;
    animation: messageSlideIn 0.3s ease-out;
  }

  .chat-message:hover {
    background: rgba(255, 255, 255, 0.08);
    border-color: rgba(0, 255, 136, 0.3);
    transform: translateY(-1px);
  }

  .chat-message.own-message {
    background: rgba(0, 255, 136, 0.1);
    border-color: rgba(0, 255, 136, 0.3);
    margin-left: 20px;
  }

  .chat-message.own-message:hover {
    background: rgba(0, 255, 136, 0.15);
  }

  .message-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 8px;
    margin-bottom: 4px;
  }

  .message-author {
    font-family: 'Courier New', monospace;
    font-weight: bold;
    font-size: 13px;
    color: #00ff88;
    text-shadow: 0 0 4px currentColor;
  }

  .message-author.guest {
    color: #ff6b9d;
  }

  .message-timestamp {
    font-family: 'Courier New', monospace;
    font-size: 11px;
    color: rgba(255, 255, 255, 0.6);
  }

  .message-content {
    font-family: 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.4;
    color: #ffffff;
    word-wrap: break-word;
    white-space: pre-wrap;
  }

  .message-type-system .message-content {
    color: #00ff88;
    font-style: italic;
  }

  .message-type-join .message-content {
    color: #4ade80;
  }

  .message-type-leave .message-content {
    color: #f87171;
  }

  .chat-input-container {
    padding: 16px;
    background: rgba(0, 0, 0, 0.3);
    border-top: 1px solid rgba(0, 255, 136, 0.3);
    position: relative;
    z-index: 2;
  }

  .input-wrapper {
    display: flex;
    gap: 8px;
    align-items: center;
    margin-bottom: 8px;
  }

  .chat-input {
    flex: 1;
    padding: 12px 16px;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(0, 255, 136, 0.3);
    border-radius: 6px;
    color: #ffffff;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    outline: none;
    transition: all 0.2s ease;
  }

  .chat-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  .chat-input:focus {
    border-color: #00ff88;
    background: rgba(255, 255, 255, 0.15);
    box-shadow: 0 0 0 2px rgba(0, 255, 136, 0.2);
  }

  .send-button {
    padding: 12px;
    background: linear-gradient(135deg, #00ff88 0%, #00cc6a 100%);
    border: none;
    border-radius: 6px;
    color: #000000;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 48px;
    height: 48px;
  }

  .send-button:hover {
    background: linear-gradient(135deg, #00cc6a 0%, #00aa55 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 255, 136, 0.3);
  }

  .send-button:active {
    transform: translateY(0);
  }

  .send-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .send-icon {
    font-size: 16px;
    filter: drop-shadow(0 0 2px rgba(0, 0, 0, 0.5));
  }

  .input-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 11px;
    color: rgba(255, 255, 255, 0.6);
    font-family: 'Courier New', monospace;
  }

  .char-counter {
    transition: color 0.2s ease;
  }

  .char-counter.warning {
    color: #fbbf24;
  }

  .char-counter.danger {
    color: #ef4444;
  }

  .typing-indicator {
    font-style: italic;
    color: #00ff88;
    min-height: 13px;
  }

  .typing-indicator.active::after {
    content: '...';
    animation: typingDots 1.5s infinite;
  }

  @keyframes messageSlideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes typingDots {
    0%, 20% { opacity: 0; }
    50% { opacity: 1; }
    100% { opacity: 0; }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .chat-messages {
      padding: 12px;
      gap: 8px;
    }

    .chat-input-container {
      padding: 12px;
    }

    .chat-message {
      padding: 10px;
    }

    .chat-input {
      padding: 10px 12px;
      font-size: 13px;
    }

    .send-button {
      min-width: 44px;
      height: 44px;
    }
  }

  /* Dark mode enhancements */
  @media (prefers-color-scheme: dark) {
    .text-chat-panel {
      background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 100%);
    }

    .chat-input {
      background: rgba(255, 255, 255, 0.05);
    }

    .chat-input:focus {
      background: rgba(255, 255, 255, 0.1);
    }
  }

  /* Animation for new messages */
  .chat-message.new-message {
    animation: messageSlideIn 0.3s ease-out, messageHighlight 2s ease-out;
  }

  @keyframes messageHighlight {
    0% {
      background: rgba(0, 255, 136, 0.2);
      border-color: #00ff88;
    }
    100% {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.1);
    }
  }

  /* Scrollbar styling for Firefox */
  .chat-messages {
    scrollbar-width: thin;
    scrollbar-color: #00ff88 rgba(0, 0, 0, 0.2);
  }
</style>

<script>
  class TextChatPanel {
    constructor() {
      this.chatMessages = document.getElementById('chat-messages');
      this.chatInput = document.getElementById('chat-input');
      this.sendButton = document.getElementById('send-button');
      this.charCounter = document.getElementById('char-counter');
      this.typingIndicator = document.getElementById('typing-indicator');
      
      this.maxLength = 500;
      this.typingTimeout = null;
      this.isTyping = false;
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.updateCharCounter();
    }

    setupEventListeners() {
      // Send message on button click
      this.sendButton?.addEventListener('click', () => {
        this.sendMessage();
      });

      // Send message on Enter key
      this.chatInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          this.sendMessage();
        }
      });

      // Update character counter
      this.chatInput?.addEventListener('input', () => {
        this.updateCharCounter();
        this.handleTyping();
      });

      // Handle typing indicator
      this.chatInput?.addEventListener('focus', () => {
        this.handleTyping();
      });

      this.chatInput?.addEventListener('blur', () => {
        this.stopTyping();
      });
    }

    updateCharCounter() {
      if (!this.chatInput || !this.charCounter) return;
      
      const length = this.chatInput.value.length;
      this.charCounter.textContent = `${length}/${this.maxLength}`;
      
      // Update counter color based on length
      this.charCounter.classList.remove('warning', 'danger');
      if (length > this.maxLength * 0.8) {
        this.charCounter.classList.add('warning');
      }
      if (length > this.maxLength * 0.95) {
        this.charCounter.classList.add('danger');
      }
      
      // Enable/disable send button
      if (this.sendButton) {
        this.sendButton.disabled = length === 0 || length > this.maxLength;
      }
    }

    handleTyping() {
      if (!this.isTyping && this.chatInput?.value.trim()) {
        this.isTyping = true;
        this.broadcastTyping(true);
      }
      
      // Clear existing timeout
      if (this.typingTimeout) {
        clearTimeout(this.typingTimeout);
      }
      
      // Set new timeout to stop typing
      this.typingTimeout = setTimeout(() => {
        this.stopTyping();
      }, 2000);
    }

    stopTyping() {
      if (this.isTyping) {
        this.isTyping = false;
        this.broadcastTyping(false);
      }
      
      if (this.typingTimeout) {
        clearTimeout(this.typingTimeout);
        this.typingTimeout = null;
      }
    }

    broadcastTyping(isTyping) {
      // Dispatch custom event for typing status
      window.dispatchEvent(new CustomEvent('chat-typing', {
        detail: { isTyping }
      }));
    }

    sendMessage() {
      if (!this.chatInput) return;
      
      const message = this.chatInput.value.trim();
      if (!message || message.length > this.maxLength) return;
      
      // Dispatch custom event for sending message
      window.dispatchEvent(new CustomEvent('chat-send-message', {
        detail: { message }
      }));
      
      // Clear input
      this.chatInput.value = '';
      this.updateCharCounter();
      this.stopTyping();
      
      // Focus back to input
      this.chatInput.focus();
    }

    addMessage(messageData) {
      if (!this.chatMessages) return;
      
      const messageElement = this.createMessageElement(messageData);
      this.chatMessages.appendChild(messageElement);
      
      // Scroll to bottom
      this.scrollToBottom();
      
      // Add highlight animation for new messages
      setTimeout(() => {
        messageElement.classList.add('new-message');
      }, 10);
    }

    createMessageElement(messageData) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `chat-message message-type-${messageData.message_type || 'text'}`;
      
      // Add own-message class if it's from current user
      if (messageData.isOwnMessage) {
        messageDiv.classList.add('own-message');
      }
      
      const headerDiv = document.createElement('div');
      headerDiv.className = 'message-header';
      
      const authorSpan = document.createElement('span');
      authorSpan.className = `message-author ${messageData.isGuest ? 'guest' : ''}`;
      authorSpan.textContent = messageData.username || 'Anonymous';
      
      const timestampSpan = document.createElement('span');
      timestampSpan.className = 'message-timestamp';
      timestampSpan.textContent = this.formatTimestamp(messageData.created_at || new Date());
      
      headerDiv.appendChild(authorSpan);
      headerDiv.appendChild(timestampSpan);
      
      const contentDiv = document.createElement('div');
      contentDiv.className = 'message-content';
      contentDiv.textContent = messageData.content || messageData.message || '';
      
      messageDiv.appendChild(headerDiv);
      messageDiv.appendChild(contentDiv);
      
      return messageDiv;
    }

    formatTimestamp(timestamp) {
      const date = new Date(timestamp);
      const now = new Date();
      const diffMs = now - date;
      const diffMins = Math.floor(diffMs / 60000);
      
      if (diffMins < 1) return 'just now';
      if (diffMins < 60) return `${diffMins}m ago`;
      if (diffMins < 1440) return `${Math.floor(diffMins / 60)}h ago`;
      
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    scrollToBottom() {
      if (this.chatMessages) {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
      }
    }

    clearMessages() {
      if (this.chatMessages) {
        // Keep welcome message
        const welcomeMessage = this.chatMessages.querySelector('.welcome-message');
        this.chatMessages.innerHTML = '';
        if (welcomeMessage) {
          this.chatMessages.appendChild(welcomeMessage);
        }
      }
    }

    showTypingIndicator(username) {
      if (this.typingIndicator) {
        this.typingIndicator.textContent = `${username} is typing`;
        this.typingIndicator.classList.add('active');
      }
    }

    hideTypingIndicator() {
      if (this.typingIndicator) {
        this.typingIndicator.textContent = '';
        this.typingIndicator.classList.remove('active');
      }
    }

    setEnabled(enabled) {
      if (this.chatInput) {
        this.chatInput.disabled = !enabled;
      }
      if (this.sendButton) {
        this.sendButton.disabled = !enabled;
      }
    }

    focus() {
      if (this.chatInput) {
        this.chatInput.focus();
      }
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      window.textChatPanel = new TextChatPanel();
    });
  } else {
    window.textChatPanel = new TextChatPanel();
  }
</script>