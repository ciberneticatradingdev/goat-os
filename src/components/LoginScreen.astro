---
// Componente de pantalla de login
---

<div id="login-screen" class="hidden min-h-screen bg-[url('/goat2.jpg')] bg-left bg-cover w-screen flex flex-col items-center justify-center bg-white relative overflow-hidden">
  <!-- Background overlay -->
  <div class="absolute inset-0 bg-black/30"></div>
  
  <!-- Background pattern -->
  <div class="absolute inset-0 opacity-10">
    <!-- <div class="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg')]" width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%23ffffff" fill-opacity="0.1"%3E%3Ccircle cx="30" cy="30" r="2"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')]">
    </div> -->
  </div>

  <!-- Login container -->
  <div class="relative z-10 bg-white backdrop-blur-lg rounded-2xl p-8 w-96 mx-4">
    <!-- User avatar -->
    <div class="flex flex-col items-center mb-6">
      <div class="flex items-center justify-center mb-4">
        <img src="/goatos.png" class="w-40 h-40 text-black" alt="goat-svg" />
      </div>
      <p class="text-black/70 text-sm">Enter your password to continue</p>
    </div>

    <!-- Password form -->
    <form id="login-form" class="space-y-4">
      <div class="relative">
        <input 
          type="password" 
          id="password-input" 
          placeholder="Password" 
          class="w-full px-4 py-3 bg-white/10 border border-black/30 rounded-lg text-black placeholder-black/50 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200"
          autocomplete="current-password"
        />
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
          <svg class="w-5 h-5 text-black/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
          </svg>
        </div>
      </div>
      
      <button 
        type="submit" 
        id="login-button"
        class="w-full hover:to-purple-700 text-black font-semibold py-3 px-4 rounded-lg transition-all duration-200 transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-transparent"
      >
        Sign In
      </button>
    </form>

    <!-- Error message -->
    <div id="error-message" class="hidden mt-4 p-3 bg-red-500/20 border border-red-500/30 rounded-lg text-red-200 text-sm text-center">
      Incorrect password. Please try again.
    </div>

    <!-- Hint -->
    <div class="mt-6 text-center">
      <p class="text-black/50 text-xs">Hint: Try 'admin' or 'password'</p>
    </div>
  </div>

  <!-- Footer -->
  <div class="absolute bottom-4 left-4 text-black/50 text-sm">
    GOAT OS v1.0
  </div>
  
  <div class="absolute bottom-4 right-4 text-black/50 text-sm">
    <div class="flex items-center space-x-2">
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
      </svg>
      <span id="login-clock"></span>
    </div>
  </div>
</div>

<style>
  /* Subtle animations */
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  .login-container {
    animation: float 6s ease-in-out infinite;
  }

  /* Focus animations */
  #password-input:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
  }

  /* Button press effect */
  #login-button:active {
    transform: scale(0.98);
  }
</style>

<script>
  class LoginScreen {
    constructor() {
      this.passwordInput = document.getElementById('password-input');
      this.loginForm = document.getElementById('login-form');
      this.loginButton = document.getElementById('login-button');
      this.errorMessage = document.getElementById('error-message');
      this.loginScreen = document.getElementById('login-screen');
      this.clockElement = document.getElementById('login-clock');
      
      this.validPasswords = ['admin', 'password', 'goat', '123456'];
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.startClock();
      this.focusPasswordInput();
    }

    setupEventListeners() {
      if (this.loginForm) {
        this.loginForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.handleLogin();
        });
      }

      if (this.passwordInput) {
        this.passwordInput.addEventListener('input', () => {
          this.hideError();
        });

        this.passwordInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            this.handleLogin();
          }
        });
      }
    }

    handleLogin() {
      const password = this.passwordInput?.value || '';
      
      if (this.validPasswords.includes(password.toLowerCase())) {
        this.showSuccess();
      } else {
        this.showError();
      }
    }

    showSuccess() {
      this.loginButton.textContent = 'Signing in...';
      this.loginButton.disabled = true;
      this.loginButton.classList.add('opacity-75');
      
      setTimeout(() => {
        this.loginScreen.style.transition = 'opacity 0.5s ease-out';
        this.loginScreen.style.opacity = '0';
        
        setTimeout(() => {
          this.loginScreen.style.display = 'none';
          
          // Show desktop
          const mainScreen = document.getElementById('main-screen');
          if (mainScreen) {
            mainScreen.classList.remove('hidden');
            mainScreen.style.opacity = '0';
            mainScreen.style.transition = 'opacity 0.5s ease-in';
            
            setTimeout(() => {
              mainScreen.style.opacity = '1';
              
              // Start playing goat.mp3 in loop after successful login
              setTimeout(() => {
                const audio = new Audio('/goat.mp3');
                audio.loop = true;
                audio.volume = 0.5;
                audio.play().catch(error => {
                  console.log('Audio autoplay prevented:', error);
                });
              }, 500);
            }, 50);
          }
        }, 500);
      }, 1000);
    }

    showError() {
      this.errorMessage?.classList.remove('hidden');
      this.passwordInput.value = '';
      this.passwordInput?.focus();
      
      // Shake animation
      this.passwordInput?.classList.add('animate-pulse');
      setTimeout(() => {
        this.passwordInput?.classList.remove('animate-pulse');
      }, 500);
    }

    hideError() {
      this.errorMessage?.classList.add('hidden');
    }

    focusPasswordInput() {
      setTimeout(() => {
        this.passwordInput?.focus();
      }, 500);
    }

    startClock() {
      const updateClock = () => {
        const now = new Date();
        const timeString = now.toLocaleTimeString('en-US', {
          hour12: true,
          hour: 'numeric',
          minute: '2-digit'
        });
        
        if (this.clockElement) {
          this.clockElement.textContent = timeString;
        }
      };
      
      updateClock();
      setInterval(updateClock, 1000);
    }
  }

  // Initialize login screen when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new LoginScreen();
  });
</script>