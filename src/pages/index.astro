---
import Layout from "../layouts/Layout.astro";
const contractAddress = "9FzeRFVq5weQHTPRE8k1LA1etxU2TqA1vp71EBxYpump";
const shortContractAddress = contractAddress.slice(0, 10) + "...." + contractAddress.slice(-4);
---

<Layout
	title="Floating Kanye | Viral Tik Tok Meme"
	description=""
	keywords=""
	canonicalURL=""
	robots="index, follow"
>
    <div id="landing-page" class="fixed inset-0 bg-[url('/floatingye.jpg')] bg-center flex items-center justify-center z-50">
        <button id="enter-button" class="bg-black/50 border-2 border-white text-white px-8 py-4 text-xl font-bold tracking-wider hover:bg-white hover:text-black hover:scale-110 transition-all duration-300 backdrop-blur-sm shadow-2xl">
            ENTER SITE
        </button>
    </div>

    <audio id="background-music" loop preload="auto">
        <source src="/ye.mp3" type="audio/mpeg">
    </audio>

	<main id="main-content" class="hidden bg-[url('/kanye.jpg')] bg-cover bg-center min-h-screen text-white py-4 flex flex-col pt-20 items-center justify-between relative">
	    <!-- Buttons section centered -->
	    <div class="flex flex-wrap justify-center items-center gap-4 mt-8">
	        <button id="ca-button" class="bg-black/50 border-2 border-white text-white px-6 py-3 text-lg font-bold tracking-wider hover:bg-white hover:text-black hover:scale-110 transition-all duration-300 backdrop-blur-sm shadow-2xl" data-address={contractAddress}>
	            <span class="hidden sm:inline">CA: {contractAddress}</span>
	            <span class="sm:hidden">CA: {shortContractAddress}</span>
	        </button>
	        <button class="bg-black/50 border-2 border-white text-white px-6 py-3 text-lg font-bold tracking-wider hover:bg-white hover:text-black hover:scale-110 transition-all duration-300 backdrop-blur-sm shadow-2xl">
	            TIKTOK
	        </button>
	        <button class="bg-black/50 border-2 border-white text-white px-6 py-3 text-lg font-bold tracking-wider hover:bg-white hover:text-black hover:scale-110 transition-all duration-300 backdrop-blur-sm shadow-2xl">
	            X COMMUNITY
	        </button>
	    </div>
	    </div>
	</main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const landingPage = document.getElementById('landing-page');
    const mainContent = document.getElementById('main-content');
    const enterButton = document.getElementById('enter-button');
    const backgroundMusic = document.getElementById('background-music');
    const caButton = document.getElementById('ca-button');
    
    enterButton.addEventListener('click', () => {
      // Start playing music
      backgroundMusic.play();
      
      // Hide landing page
      landingPage.style.display = 'none';
      
      // Show and fade in main content
      mainContent.classList.remove('hidden');
      mainContent.style.opacity = '0';
      mainContent.style.transition = 'opacity 1s ease-in-out';
      
      // Trigger reflow to ensure transition works
      mainContent.offsetHeight;
      mainContent.style.opacity = '1';
    });

    // Copy CA to clipboard
    if (caButton) {
      caButton.addEventListener('click', async () => {
        const address = caButton.getAttribute('data-address');
        try {
          await navigator.clipboard.writeText(address);
          
          // Visual feedback
          const originalText = caButton.innerHTML;
          caButton.innerHTML = 'COPIED!';
          caButton.classList.add('bg-green-500/50');
          caButton.classList.remove('bg-black/50');
          
          setTimeout(() => {
            caButton.innerHTML = originalText;
            caButton.classList.remove('bg-green-500/50');
            caButton.classList.add('bg-black/50');
          }, 1500);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      });
    }

    const copyButtons = document.querySelectorAll('.copy-button');
    const contractText = document.querySelector('.contract-text');
    
    const copyToClipboard = async (address) => {
      try {
        await navigator.clipboard.writeText(address);
        
        // Visual feedback
        const element = event.target.closest('.contract-text, .copy-button');
        const originalBg = element.classList.contains('bg-white/20');
        
        if (originalBg) {
          element.classList.remove('bg-white/20');
          element.classList.add('bg-green-500/50');
          
          setTimeout(() => {
            element.classList.remove('bg-green-500/50');
            element.classList.add('bg-white/20');
          }, 1000);
        } else {
          element.classList.add('text-green-500');
          
          setTimeout(() => {
            element.classList.remove('text-green-500');
          }, 1000);
        }
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    };
    
    copyButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const address = button.getAttribute('data-address');
        copyToClipboard(address);
      });
    });

    if (contractText) {
      contractText.addEventListener('click', (e) => {
        const address = contractText.getAttribute('data-address');
        copyToClipboard(address);
      });
    }
  });
</script>

<style>
  #main-content {
    opacity: 0;
  }
  
  #main-content:not(.hidden) {
    opacity: 1;
  }
</style>
