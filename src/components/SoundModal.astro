---
export interface Props {
  onComplete?: (choice: 'yes' | 'no') => void;
  audioSrc?: string;
  audioStartTime?: number;
}

const { onComplete, audioSrc = '/troll.mp3', audioStartTime = 7 } = Astro.props;
---

<!-- Sound modal -->
<div id="sound-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white border-4 border-black p-8 max-w-md mx-4">
    <div class="text-center">
      <img src="/trollface.png" alt="Trollface" class="w-16 h-16 mx-auto mb-4">
      <h2 class="text-black text-xl font-bold mb-4">TrollOS Audio Settings</h2>
      <p class="text-black mb-6">Do you want to activate sound for a better experience?</p>
      <div class="flex gap-4 justify-center">
        <button id="sound-yes" class="bg-white border-2 border-black px-6 py-2 text-black font-bold hover:bg-gray-100 transition-colors">
          Yes
        </button>
        <button id="sound-no" class="bg-white border-2 border-black px-6 py-2 text-black font-bold hover:bg-gray-100 transition-colors">
          No
        </button>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ audioSrc, audioStartTime }}>
  class SoundModal {
    constructor() {
      this.soundModal = document.getElementById('sound-modal');
      this.soundYes = document.getElementById('sound-yes');
      this.soundNo = document.getElementById('sound-no');
      this.audio = new Audio(audioSrc);
      this.audio.loop = true;
      
      this.init();
    }
    
    init() {
      if (this.soundYes && this.soundNo) {
        this.soundYes.addEventListener('click', () => this.handleChoice('yes'));
        this.soundNo.addEventListener('click', () => this.handleChoice('no'));
      }
    }
    
    show() {
      if (this.soundModal) {
        this.soundModal.classList.remove('hidden');
      }
    }
    
    hide() {
      if (this.soundModal) {
        this.soundModal.classList.add('hidden');
      }
    }
    
    handleChoice(choice) {
      // Show message based on choice
      const messageDiv = document.createElement('div');
      messageDiv.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      
      if (choice === 'yes') {
        messageDiv.innerHTML = `
          <div class="bg-white border-4 border-black p-8 max-w-md mx-4 text-center">
            <img src="/trollface.png" alt="Trollface" class="w-16 h-16 mx-auto mb-4">
            <h2 class="text-black text-xl font-bold mb-4">Good choice!</h2>
            <p class="text-black">Enjoy the experience... ðŸ˜ˆ</p>
          </div>
        `;
      } else {
        messageDiv.innerHTML = `
          <div class="bg-white border-4 border-black p-8 max-w-md mx-4 text-center">
            <img src="/trollface.png" alt="Trollface" class="w-16 h-16 mx-auto mb-4">
            <h2 class="text-black text-xl font-bold mb-4">Too bad! ðŸ˜ˆ</h2>
            <p class="text-black">We're going to play it anyway... Problem? ðŸŽµ</p>
          </div>
        `;
      }
      
      document.body.appendChild(messageDiv);
      
      // Start audio at specified time immediately after click
      this.audio.currentTime = audioStartTime;
      this.audio.play().catch(e => console.log('Audio autoplay blocked'));
      
      // Remove message after 2 seconds and complete
      setTimeout(() => {
        document.body.removeChild(messageDiv);
        this.hide();
        
        // Dispatch custom event with choice
        const event = new CustomEvent('soundModalComplete', {
          detail: { choice }
        });
        document.dispatchEvent(event);
      }, 2000);
    }
  }
  
  // Initialize the sound modal
  const soundModalInstance = new SoundModal();
  
  // Expose methods globally for external use
  window.soundModal = {
    show: () => soundModalInstance.show(),
    hide: () => soundModalInstance.hide()
  };
</script>